package tlu.finalproject.hrmanagement.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import tlu.finalproject.hrmanagement.dto.EmployeeDTO;
import tlu.finalproject.hrmanagement.dto.common.ApiResponse;
import tlu.finalproject.hrmanagement.dto.common.ResponseUtil;
import tlu.finalproject.hrmanagement.exception.ResourceNotFoundException;
import tlu.finalproject.hrmanagement.service.FileStorageService;
import tlu.finalproject.hrmanagement.service.UserService;

import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("api/users")
@RequiredArgsConstructor
public class UserController {
    private final UserService userService;
    private final FileStorageService fileStorageService;

    @GetMapping
    public ResponseEntity<ApiResponse<List<EmployeeDTO>>> getAllUsers() {
        List<EmployeeDTO> users = userService.getAllUsers();
        return ResponseUtil.success(users, "L·∫•y danh s√°ch nh√¢n vi√™n th√†nh c√¥ng");
    }

    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<EmployeeDTO>> getUserById(@PathVariable Long id) {
        EmployeeDTO user = userService.getUserById(id);
        if (user == null) {
            return ResponseUtil.notFound("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi ID " + id);
        }
        return ResponseUtil.success(user, "L·∫•y th√¥ng tin nh√¢n vi√™n th√†nh c√¥ng");
    }

    @GetMapping("/department/{departmentId}")
    public ResponseEntity<ApiResponse<List<EmployeeDTO>>> getUsersByDepartment(@PathVariable Long departmentId) {
        List<EmployeeDTO> users = userService.getUsersByDepartmentId(departmentId);
        return ResponseUtil.success(users, "L·∫•y danh s√°ch nh√¢n vi√™n theo ph√≤ng ban th√†nh c√¥ng");
    }

    @PostMapping
    public ResponseEntity<ApiResponse<EmployeeDTO>> createUser(
            @RequestPart("data") String employeeJson,
            @RequestPart(value = "image", required = false) MultipartFile imageFile
    ) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        EmployeeDTO employeeDTO = objectMapper.readValue(employeeJson, EmployeeDTO.class); // üëà parse JSON

        if (imageFile != null && !imageFile.isEmpty()) {
            String imageUrl = fileStorageService.saveFile(imageFile); // L∆∞u file ·∫£nh v√† l·∫•y ƒë∆∞·ªùng d·∫´n
            employeeDTO.setProfileImageUrl(imageUrl); // G√°n l·∫°i URL ·∫£nh v√†o DTO
        }
        EmployeeDTO createdUser = userService.createUser(employeeDTO);
        return ResponseUtil.created(createdUser, "T·∫°o nh√¢n vi√™n m·ªõi th√†nh c√¥ng");
    }

    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<EmployeeDTO>> updateUser(
            @PathVariable Long id,
            @RequestPart("data") String employeeJson, // üëà nh·∫≠n raw JSON
            @RequestPart(value = "image", required = false) MultipartFile imageFile
    ) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        EmployeeDTO employeeDTO = objectMapper.readValue(employeeJson, EmployeeDTO.class); // üëà parse JSON

        if (imageFile != null && !imageFile.isEmpty()) {
            String imageUrl = fileStorageService.saveFile(imageFile);
            employeeDTO.setProfileImageUrl(imageUrl);
        }

        EmployeeDTO updatedUser = userService.updateUser(id, employeeDTO);
        if (updatedUser == null) {
            return ResponseUtil.notFound("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi ID " + id);
        }
        return ResponseUtil.success(updatedUser, "C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng");
    }
}
